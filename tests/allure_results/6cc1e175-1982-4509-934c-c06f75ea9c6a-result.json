{"name": "test_4", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"input[value='profession'] + span\"}\n  (Session info: headless chrome=113.0.5672.92)\nStacktrace:\n0   chromedriver                        0x0000000105c16ae8 chromedriver + 4958952\n1   chromedriver                        0x0000000105c0e7b3 chromedriver + 4925363\n2   chromedriver                        0x00000001057d01d6 chromedriver + 475606\n3   chromedriver                        0x0000000105813a20 chromedriver + 752160\n4   chromedriver                        0x0000000105813c81 chromedriver + 752769\n5   chromedriver                        0x0000000105857f64 chromedriver + 1032036\n6   chromedriver                        0x0000000105839c3d chromedriver + 908349\n7   chromedriver                        0x000000010585525b chromedriver + 1020507\n8   chromedriver                        0x00000001058399e3 chromedriver + 907747\n9   chromedriver                        0x0000000105803aef chromedriver + 686831\n10  chromedriver                        0x000000010580500e chromedriver + 692238\n11  chromedriver                        0x0000000105bd29ad chromedriver + 4680109\n12  chromedriver                        0x0000000105bd7c12 chromedriver + 4701202\n13  chromedriver                        0x0000000105bde79f chromedriver + 4728735\n14  chromedriver                        0x0000000105bd8b7a chromedriver + 4705146\n15  chromedriver                        0x0000000105bab27e chromedriver + 4518526\n16  chromedriver                        0x0000000105bf8908 chromedriver + 4835592\n17  chromedriver                        0x0000000105bf8a87 chromedriver + 4835975\n18  chromedriver                        0x0000000105c0800f chromedriver + 4898831\n19  libsystem_pthread.dylib             0x00007ff80bcd34f4 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff80bccf00f thread_start + 15", "trace": "self = <test_6.TestExample object at 0x105f71d50>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver (session=\"aeb331ce74e35a5581bd32eeac67114f\")>\n\n    def test_4(self, selenium):\n        selenium.get(\"https://skillbox.ru/code/\")\n    \n        # Выбираем радио-баттон с названием «Профессия» в разделе «Тип обучения на платформе»\n>       type_input = selenium.find_element(By.CSS_SELECTOR, \"input[value='profession'] + span\").click()\n\ntest_6.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../../miniconda/envs/skillbox_22/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../../miniconda/envs/skillbox_22/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x105f7f5d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff80bcd34f4 _pthread_start + 125\\\\n20  libsystem_pthread.dylib             0x00007ff80bccf00f thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"input[value='profession'] + span\"}\nE         (Session info: headless chrome=113.0.5672.92)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000105c16ae8 chromedriver + 4958952\nE       1   chromedriver                        0x0000000105c0e7b3 chromedriver + 4925363\nE       2   chromedriver                        0x00000001057d01d6 chromedriver + 475606\nE       3   chromedriver                        0x0000000105813a20 chromedriver + 752160\nE       4   chromedriver                        0x0000000105813c81 chromedriver + 752769\nE       5   chromedriver                        0x0000000105857f64 chromedriver + 1032036\nE       6   chromedriver                        0x0000000105839c3d chromedriver + 908349\nE       7   chromedriver                        0x000000010585525b chromedriver + 1020507\nE       8   chromedriver                        0x00000001058399e3 chromedriver + 907747\nE       9   chromedriver                        0x0000000105803aef chromedriver + 686831\nE       10  chromedriver                        0x000000010580500e chromedriver + 692238\nE       11  chromedriver                        0x0000000105bd29ad chromedriver + 4680109\nE       12  chromedriver                        0x0000000105bd7c12 chromedriver + 4701202\nE       13  chromedriver                        0x0000000105bde79f chromedriver + 4728735\nE       14  chromedriver                        0x0000000105bd8b7a chromedriver + 4705146\nE       15  chromedriver                        0x0000000105bab27e chromedriver + 4518526\nE       16  chromedriver                        0x0000000105bf8908 chromedriver + 4835592\nE       17  chromedriver                        0x0000000105bf8a87 chromedriver + 4835975\nE       18  chromedriver                        0x0000000105c0800f chromedriver + 4898831\nE       19  libsystem_pthread.dylib             0x00007ff80bcd34f4 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff80bccf00f thread_start + 15\n\n../../../../miniconda/envs/skillbox_22/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchElementException"}, "attachments": [{"name": "log", "source": "294b02e2-a723-40fc-91a1-a5a72d14fe8d-attachment.txt", "type": "text/plain"}], "start": 1684427341050, "stop": 1684427386927, "uuid": "af8337d3-994d-45ab-8104-22cda4bb5d12", "historyId": "7984845ede35abaf76e8ff784eef40d1", "testCaseId": "7984845ede35abaf76e8ff784eef40d1", "fullName": "tests.test_6.TestExample#test_4", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_6"}, {"name": "subSuite", "value": "TestExample"}, {"name": "host", "value": "MacBook-Pro-Galina.local"}, {"name": "thread", "value": "12173-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_6"}]}